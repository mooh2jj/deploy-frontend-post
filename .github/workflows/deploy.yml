name: Deploy Vite React App To EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v3
        with:
          node-version: "19"

      - name: Create .env file
        run: |
          echo "${{ secrets.REACT_ENV_FILE }}" > .env.production
          cat .env.production # 환경 변수 파일이 올바르게 생성되었는지 확인 (민감한 정보는 마스킹됨)

      - name: 의존성 설치
        run: npm i --force

      - name: Vite 빌드
        run: |
          export CI=false
          ls -la # 현재 디렉토리의 파일 목록 확인
          echo "환경 변수 파일 확인:"
          cat .env.production | grep -v "PASSWORD\|SECRET\|KEY" # 민감한 정보 제외하고 출력
          npm run build

      - name: 빌드 결과물 업로드
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      REPOSITORY_NAME: deploy-frontend-post

    steps:
      - name: 빌드 결과물 다운로드
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist

      - name: 빌드 디렉토리 압축
        run: |
          sudo apt-get update && sudo apt-get install -y zip
          sudo zip -r dist.zip dist

      - name: EC2 디렉토리 권한 설정
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            mkdir -p /home/ubuntu/${{ env.REPOSITORY_NAME }}
            sudo chown -R ubuntu:ubuntu /home/ubuntu/${{ env.REPOSITORY_NAME }}
            sudo chmod -R 775 /home/ubuntu/${{ env.REPOSITORY_NAME }}

      - name: SSH로 EC2에 접속하고 빌드 파일 전송
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete
          path: dist.zip
          remote_path: /home/ubuntu/${{ env.REPOSITORY_NAME }}/
          remote_host: ${{ secrets.EC2_HOST }}
          remote_user: ${{ secrets.EC2_USERNAME }}
          remote_key: ${{ secrets.EC2_PRIVATE_KEY }}

      - name: SSH로 EC2에 접속하고 배포 진행
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true # 이전에 실행중인 스크립트 중지
          script: |
            cd /home/ubuntu/${{ env.REPOSITORY_NAME }}
            # 권한 재설정
            sudo chown -R ubuntu:ubuntu .

            # unzip 설치
            sudo apt-get update
            sudo apt-get install -y unzip

                        # 기존 빌드 디렉토리 삭제 및 압축 해제
            sudo rm -rf dist
            sudo unzip -o dist.zip
            sudo rm dist.zip
            sudo chown -R ubuntu:ubuntu dist

            # PM2 설치 확인 및 서버 재시작
            if ! command -v pm2 &> /dev/null; then
              echo "PM2가 설치되어 있지 않습니다. 설치를 진행합니다."
              sudo npm install -g pm2
            fi

            # 모든 PM2 프로세스 중지 및 삭제
            echo "모든 PM2 프로세스 삭제"
            pm2 delete all || true

            # 3000 포트를 사용하는 모든 프로세스 확인
            echo "포트 3000을 사용중인 프로세스 확인"
            sudo lsof -i :3000 || true

            # 3000 포트를 사용하는 모든 프로세스 강제 종료
            echo "포트 3000을 사용하는 프로세스 종료"
            sudo fuser -k 3000/tcp || true

            # 프로세스 종료 후 잠시 대기
            sleep 5

            # 포트가 정리되었는지 확인
            sudo lsof -i :3000 || true

            # 3000 포트로 서비스 시작
            echo "PM2로 3000 포트에서 서비스 시작"
            pm2 serve dist 3000 --name frontend-post
